#! groovy

@Library('gcs-build-scripts') _

pipeline {
    agent none
    options {
        buildDiscarder(
            logRotator(
                numToKeepStr: '5',
                artifactNumToKeepStr: '1',
                artifactDaysToKeepStr: '7'
            )
        )
        timeout(time: 3, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    stages {
        stage ("Prep source") {
            agent {label "package_creator"}
            steps {
                script {
                    def scmVars = checkout scm
                    env.BRANCH_NAME = scmVars.GIT_BRANCH.replaceFirst(/^.*origin\//, "")
                    env.TAG_NAME = sh(returnStdout: true, script: "git tag --contains | head -1").trim()
                    env.SOURCE_STASH_NAME = "${UUID.randomUUID()}"
                    echo "env.BRANCH_NAME = ${env.BRANCH_NAME}"
                    echo "env.DEFAULT_BRANCH = ${env.DEFAULT_BRANCH}"
                    sh "git clean -fdx"


                    // temporary hack to build for stable
                    sh "git checkout build_for_stable"
                    env.TAG_NAME = "2.28.0"
                    env.DEFAULT_BRANCH = "build_for_stable"

                    dir("compute_endpoint/packaging/") {
                        sh(script: "make show_vars")
                        sh(script: "make setup_dist_for_deb setup_dist_for_rpm")
                        sh "mv dist/ ${env.SOURCE_STASH_NAME}"
                        stash(name: env.SOURCE_STASH_NAME, includes: "${env.SOURCE_STASH_NAME}/**/*")
                    }

                    def venv_py = "${env.WORKSPACE}/compute_endpoint/packaging/venv/bin/python"
                    def py_full_version = sh(script: "'${venv_py}' -c 'import sys; print(\"{}.{}\".format(*sys.version_info))'", returnStdout: true).trim()
                    def (py_epoch_version, py_major_version) = py_full_version.tokenize(".")
                    def pkg_version = "not yet set"

                    dir("compute_endpoint/") {
                        env.PACKAGE_VERSION = sh(script: "${venv_py} setup.py --version", returnStdout: true).trim().replace("-", "~")
                        echo "pkg_version = ${env.PACKAGE_VERSION}"
                    }
                    env.PKG_TARBALL = "globus_compute_endpoint-${env.PACKAGE_VERSION.replace("~", "")}.tar.gz"
                    env.PREREQS_TARBALL = "globus_compute_endpoint-prereqs-py${py_epoch_version}${py_major_version}-${env.PACKAGE_VERSION}.tar.gz"
                }
            }
        }
        stage ("Build packages") {
            steps {
                script {
                    lock(resource: 'globus-compute-agent-build') {
                        parallel "debian": {
                            def extra_tarball_map = [
                                prereqs: env.PREREQS_TARBALL
                            ]
                            env.DEB_ARTIFACTS_STASH = buildDebian(
                                env.SOURCE_STASH_NAME,
                                env.PKG_TARBALL,
                                require_gcs5_repo: true,
                                extra_tarball_map: extra_tarball_map
                            )
                        }, "rpm": {
                            env.RPM_ARTIFACTS_STASH = buildMock(
                                env.SOURCE_STASH_NAME,
                                env.PKG_TARBALL,
                                true
                            )
                        }, "failFast": false
                    }
                }
            }
        }
        stage ("Publish packages") {
            agent { label "master" }
            steps {
                script {
                    def stashname = "${UUID.randomUUID()}"

                    dir("artifacts") {
                        if (env.DEB_ARTIFACTS_STASH) {
                            unstash(name: env.DEB_ARTIFACTS_STASH)
                        }
                        if (env.RPM_ARTIFACTS_STASH) {
                            unstash(name: env.RPM_ARTIFACTS_STASH)
                        }

                        stash(name: stashname, includes: "**/*")
                        deleteDir()
                    }
                    publishResults(stashname, "globus-compute-agent",  env.PACKAGE_VERSION, false)
                    deleteDir()
                }
            }
        }
    }
}
